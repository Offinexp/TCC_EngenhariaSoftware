{"created": 1749561720.4815528, "duration": 117.97808170318604, "exitcode": 1, "root": "C:\\Users\\Fernanda\\Desktop\\tcc_fernanda", "environment": {}, "summary": {"passed": 3, "failed": 3, "skipped": 1, "total": 7, "collected": 7}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "sistema_estoque/testes", "type": "Dir"}]}, {"nodeid": "sistema_estoque/testes/relatorios", "outcome": "passed", "result": []}, {"nodeid": "sistema_estoque/testes/test_injection_login.py::TestingConfig", "outcome": "passed", "result": []}, {"nodeid": "sistema_estoque/testes/test_injection_login.py", "outcome": "passed", "result": [{"nodeid": "sistema_estoque/testes/test_injection_login.py::TestingConfig", "type": "Class"}, {"nodeid": "sistema_estoque/testes/test_injection_login.py::test_login_sql_injection", "type": "Function", "lineno": 108}, {"nodeid": "sistema_estoque/testes/test_injection_login.py::test_login_sql_injection_drop_table", "type": "Function", "lineno": 111}, {"nodeid": "sistema_estoque/testes/test_injection_login.py::test_login_sql_injection_comment", "type": "Function", "lineno": 119}]}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::TestingConfig", "outcome": "passed", "result": []}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py", "outcome": "passed", "result": [{"nodeid": "sistema_estoque/testes/test_injection_produtos.py::TestingConfig", "type": "Class"}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_injecao_sql_com_aspas_benchmark", "type": "Function", "lineno": 119}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_injecao_sql_sem_aspas_benchmark", "type": "Function", "lineno": 127}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_injecao_sql_com_comment_benchmark", "type": "Function", "lineno": 135}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_tabela_produtos_nao_excluida", "type": "Function", "lineno": 143}]}, {"nodeid": "sistema_estoque/testes/test_permissionamento.py", "outcome": "passed", "result": []}, {"nodeid": "sistema_estoque/testes", "outcome": "passed", "result": [{"nodeid": "sistema_estoque/testes/relatorios", "type": "Dir"}, {"nodeid": "sistema_estoque/testes/test_injection_login.py", "type": "Module"}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py", "type": "Module"}, {"nodeid": "sistema_estoque/testes/test_permissionamento.py", "type": "Module"}]}], "tests": [{"nodeid": "sistema_estoque/testes/test_injection_login.py::test_login_sql_injection", "lineno": 108, "outcome": "passed", "keywords": ["test_login_sql_injection", "test_injection_login.py", "testes", "sistema_estoque", "tcc_fernanda", ""], "setup": {"duration": 0.25712389999534935, "outcome": "passed"}, "call": {"duration": 1.5704291999572888, "outcome": "passed"}, "teardown": {"duration": 0.0016071000136435032, "outcome": "passed"}}, {"nodeid": "sistema_estoque/testes/test_injection_login.py::test_login_sql_injection_drop_table", "lineno": 111, "outcome": "passed", "keywords": ["test_login_sql_injection_drop_table", "test_injection_login.py", "testes", "sistema_estoque", "tcc_fernanda", ""], "setup": {"duration": 0.005330300075002015, "outcome": "passed"}, "call": {"duration": 2.399382199975662, "outcome": "passed"}, "teardown": {"duration": 0.0008231000974774361, "outcome": "passed"}}, {"nodeid": "sistema_estoque/testes/test_injection_login.py::test_login_sql_injection_comment", "lineno": 119, "outcome": "passed", "keywords": ["test_login_sql_injection_comment", "test_injection_login.py", "testes", "sistema_estoque", "tcc_fernanda", ""], "setup": {"duration": 0.0058642999501898885, "outcome": "passed"}, "call": {"duration": 3.4798746999586, "outcome": "passed"}, "teardown": {"duration": 0.006522399955429137, "outcome": "passed"}}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_injecao_sql_com_aspas_benchmark", "lineno": 119, "outcome": "failed", "keywords": ["test_injecao_sql_com_aspas_benchmark", "test_injection_produtos.py", "testes", "sistema_estoque", "tcc_fernanda", ""], "setup": {"duration": 0.4471714000683278, "outcome": "passed"}, "call": {"duration": 78.71142730000429, "outcome": "failed", "crash": {"path": "C:\\Users\\Fernanda\\Desktop\\tcc_fernanda\\sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 117, "message": "AssertionError: assert 'Falha' == 'Bloqueado'\n  \n  - Bloqueado\n  + Falha"}, "traceback": [{"path": "sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 121, "message": ""}, {"path": "sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 117, "message": "AssertionError"}], "longrepr": "authenticated_client = <FlaskClient <Flask 'factory'>>, categoria_existente = <Categoria 1>, app = <Flask 'factory'>, benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x00000186C54C75F0>\n\n    def test_injecao_sql_com_aspas_benchmark(authenticated_client, categoria_existente, app, benchmark):\n>       executa_teste_produto(authenticated_client,\n                              app,\n                              \"'; DROP TABLE produtos; --\",\n                              categoria_existente.id,\n                              \"Inje\u00e7\u00e3o SQL com aspas\",\n                              benchmark)\n\nsistema_estoque\\testes\\test_injection_produtos.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nclient = <FlaskClient <Flask 'factory'>>, app = <Flask 'factory'>, payload_nome = \"'; DROP TABLE produtos; --\", categoria_id = 1, nome_teste = 'Inje\u00e7\u00e3o SQL com aspas'\nbenchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x00000186C54C75F0>\n\n    def executa_teste_produto(client, app, payload_nome, categoria_id, nome_teste, benchmark):\n        def call_post():\n            return client.post('/admin/produtos/novo', data={\n                'nome': payload_nome,\n                'descricao': 'Descri\u00e7\u00e3o segura',\n                'quantidade': '10',\n                'preco': '100.00',\n                'categoria': str(categoria_id)\n            }, follow_redirects=True)\n    \n        response = benchmark(call_post)\n        tempo_exec = benchmark.stats['mean']\n    \n        print(f\"\\n\ud83d\udd0e {nome_teste}\")\n        print(f\"Status code da resposta: {response.status_code}\")\n    \n        html_text = response.data.decode('utf-8')\n    \n        # Verifica se o payload aparece na resposta HTTP\n        if payload_nome in html_text:\n            resultado = \"Falha\"\n            print(f\"\u274c {nome_teste}: Payload malicioso foi exibido na resposta! Vulnerabilidade detectada.\")\n        else:\n            resultado = \"Bloqueado\"\n            print(f\"\u2705 {nome_teste}: Payload malicioso N\u00c3O foi exibido na resposta. Teste passou.\")\n    \n        # Verifica se o payload foi gravado no banco de dados\n        with app.app_context():\n            registro = Produto.query.filter_by(nome=payload_nome).first()\n            if registro:\n                resultado = \"Falha\"\n                print(f\"\u274c {nome_teste}: Payload malicioso FOI gravado no banco! Vulnerabilidade detectada.\")\n            else:\n                print(f\"\u2705 {nome_teste}: Payload malicioso N\u00c3O foi gravado no banco.\")\n    \n        registra_dados(nome_teste, tempo_exec, resultado)\n    \n        print(f\"Payload: {payload_nome}\")\n        print(f\"Tempo m\u00e9dio de execu\u00e7\u00e3o: {tempo_exec:.4f} segundos\")\n        print(f\"Resultado: {resultado}\")\n    \n>       assert resultado == \"Bloqueado\"\nE       AssertionError: assert 'Falha' == 'Bloqueado'\nE         \nE         - Bloqueado\nE         + Falha\n\nsistema_estoque\\testes\\test_injection_produtos.py:117: AssertionError"}, "teardown": {"duration": 0.00013930001296103, "outcome": "passed"}}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_injecao_sql_sem_aspas_benchmark", "lineno": 127, "outcome": "failed", "keywords": ["test_injecao_sql_sem_aspas_benchmark", "test_injection_produtos.py", "testes", "sistema_estoque", "tcc_fernanda", ""], "setup": {"duration": 0.00034439994487911463, "outcome": "passed"}, "call": {"duration": 13.36443399998825, "outcome": "failed", "crash": {"path": "C:\\Users\\Fernanda\\Desktop\\tcc_fernanda\\sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 117, "message": "AssertionError: assert 'Falha' == 'Bloqueado'\n  \n  - Bloqueado\n  + Falha"}, "traceback": [{"path": "sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 129, "message": ""}, {"path": "sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 117, "message": "AssertionError"}], "longrepr": "authenticated_client = <FlaskClient <Flask 'factory'>>, categoria_existente = <Categoria 1>, app = <Flask 'factory'>, benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x00000186C54C69F0>\n\n    def test_injecao_sql_sem_aspas_benchmark(authenticated_client, categoria_existente, app, benchmark):\n>       executa_teste_produto(authenticated_client,\n                              app,\n                              \"1; DROP TABLE produtos;\",\n                              categoria_existente.id,\n                              \"Inje\u00e7\u00e3o SQL sem aspas\",\n                              benchmark)\n\nsistema_estoque\\testes\\test_injection_produtos.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nclient = <FlaskClient <Flask 'factory'>>, app = <Flask 'factory'>, payload_nome = '1; DROP TABLE produtos;', categoria_id = 1, nome_teste = 'Inje\u00e7\u00e3o SQL sem aspas'\nbenchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x00000186C54C69F0>\n\n    def executa_teste_produto(client, app, payload_nome, categoria_id, nome_teste, benchmark):\n        def call_post():\n            return client.post('/admin/produtos/novo', data={\n                'nome': payload_nome,\n                'descricao': 'Descri\u00e7\u00e3o segura',\n                'quantidade': '10',\n                'preco': '100.00',\n                'categoria': str(categoria_id)\n            }, follow_redirects=True)\n    \n        response = benchmark(call_post)\n        tempo_exec = benchmark.stats['mean']\n    \n        print(f\"\\n\ud83d\udd0e {nome_teste}\")\n        print(f\"Status code da resposta: {response.status_code}\")\n    \n        html_text = response.data.decode('utf-8')\n    \n        # Verifica se o payload aparece na resposta HTTP\n        if payload_nome in html_text:\n            resultado = \"Falha\"\n            print(f\"\u274c {nome_teste}: Payload malicioso foi exibido na resposta! Vulnerabilidade detectada.\")\n        else:\n            resultado = \"Bloqueado\"\n            print(f\"\u2705 {nome_teste}: Payload malicioso N\u00c3O foi exibido na resposta. Teste passou.\")\n    \n        # Verifica se o payload foi gravado no banco de dados\n        with app.app_context():\n            registro = Produto.query.filter_by(nome=payload_nome).first()\n            if registro:\n                resultado = \"Falha\"\n                print(f\"\u274c {nome_teste}: Payload malicioso FOI gravado no banco! Vulnerabilidade detectada.\")\n            else:\n                print(f\"\u2705 {nome_teste}: Payload malicioso N\u00c3O foi gravado no banco.\")\n    \n        registra_dados(nome_teste, tempo_exec, resultado)\n    \n        print(f\"Payload: {payload_nome}\")\n        print(f\"Tempo m\u00e9dio de execu\u00e7\u00e3o: {tempo_exec:.4f} segundos\")\n        print(f\"Resultado: {resultado}\")\n    \n>       assert resultado == \"Bloqueado\"\nE       AssertionError: assert 'Falha' == 'Bloqueado'\nE         \nE         - Bloqueado\nE         + Falha\n\nsistema_estoque\\testes\\test_injection_produtos.py:117: AssertionError"}, "teardown": {"duration": 0.0001805999781936407, "outcome": "passed"}}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_injecao_sql_com_comment_benchmark", "lineno": 135, "outcome": "failed", "keywords": ["test_injecao_sql_com_comment_benchmark", "test_injection_produtos.py", "testes", "sistema_estoque", "tcc_fernanda", ""], "setup": {"duration": 0.0003355999942868948, "outcome": "passed"}, "call": {"duration": 14.413473000051454, "outcome": "failed", "crash": {"path": "C:\\Users\\Fernanda\\Desktop\\tcc_fernanda\\sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 117, "message": "AssertionError: assert 'Falha' == 'Bloqueado'\n  \n  - Bloqueado\n  + Falha"}, "traceback": [{"path": "sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 137, "message": ""}, {"path": "sistema_estoque\\testes\\test_injection_produtos.py", "lineno": 117, "message": "AssertionError"}], "longrepr": "authenticated_client = <FlaskClient <Flask 'factory'>>, categoria_existente = <Categoria 1>, app = <Flask 'factory'>, benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x00000186C5646000>\n\n    def test_injecao_sql_com_comment_benchmark(authenticated_client, categoria_existente, app, benchmark):\n>       executa_teste_produto(authenticated_client,\n                              app,\n                              \"' OR 1=1 --\",\n                              categoria_existente.id,\n                              \"Inje\u00e7\u00e3o SQL com coment\u00e1rio --\",\n                              benchmark)\n\nsistema_estoque\\testes\\test_injection_produtos.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nclient = <FlaskClient <Flask 'factory'>>, app = <Flask 'factory'>, payload_nome = \"' OR 1=1 --\", categoria_id = 1, nome_teste = 'Inje\u00e7\u00e3o SQL com coment\u00e1rio --'\nbenchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x00000186C5646000>\n\n    def executa_teste_produto(client, app, payload_nome, categoria_id, nome_teste, benchmark):\n        def call_post():\n            return client.post('/admin/produtos/novo', data={\n                'nome': payload_nome,\n                'descricao': 'Descri\u00e7\u00e3o segura',\n                'quantidade': '10',\n                'preco': '100.00',\n                'categoria': str(categoria_id)\n            }, follow_redirects=True)\n    \n        response = benchmark(call_post)\n        tempo_exec = benchmark.stats['mean']\n    \n        print(f\"\\n\ud83d\udd0e {nome_teste}\")\n        print(f\"Status code da resposta: {response.status_code}\")\n    \n        html_text = response.data.decode('utf-8')\n    \n        # Verifica se o payload aparece na resposta HTTP\n        if payload_nome in html_text:\n            resultado = \"Falha\"\n            print(f\"\u274c {nome_teste}: Payload malicioso foi exibido na resposta! Vulnerabilidade detectada.\")\n        else:\n            resultado = \"Bloqueado\"\n            print(f\"\u2705 {nome_teste}: Payload malicioso N\u00c3O foi exibido na resposta. Teste passou.\")\n    \n        # Verifica se o payload foi gravado no banco de dados\n        with app.app_context():\n            registro = Produto.query.filter_by(nome=payload_nome).first()\n            if registro:\n                resultado = \"Falha\"\n                print(f\"\u274c {nome_teste}: Payload malicioso FOI gravado no banco! Vulnerabilidade detectada.\")\n            else:\n                print(f\"\u2705 {nome_teste}: Payload malicioso N\u00c3O foi gravado no banco.\")\n    \n        registra_dados(nome_teste, tempo_exec, resultado)\n    \n        print(f\"Payload: {payload_nome}\")\n        print(f\"Tempo m\u00e9dio de execu\u00e7\u00e3o: {tempo_exec:.4f} segundos\")\n        print(f\"Resultado: {resultado}\")\n    \n>       assert resultado == \"Bloqueado\"\nE       AssertionError: assert 'Falha' == 'Bloqueado'\nE         \nE         - Bloqueado\nE         + Falha\n\nsistema_estoque\\testes\\test_injection_produtos.py:117: AssertionError"}, "teardown": {"duration": 0.00013109995052218437, "outcome": "passed"}}, {"nodeid": "sistema_estoque/testes/test_injection_produtos.py::test_tabela_produtos_nao_excluida", "lineno": 143, "outcome": "skipped", "keywords": ["test_tabela_produtos_nao_excluida", "skip", "test_injection_produtos.py", "testes", "sistema_estoque", "tcc_fernanda", ""], "setup": {"duration": 9.339989628642797e-05, "outcome": "skipped", "longrepr": "('C:\\\\Users\\\\Fernanda\\\\Desktop\\\\tcc_fernanda\\\\sistema_estoque\\\\testes\\\\test_injection_produtos.py', 144, 'Skipped: Skipping non-benchmark (--benchmark-only active).')"}, "teardown": {"duration": 0.03510780003853142, "outcome": "passed"}}], "warnings": [{"message": "The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)", "category": "LegacyAPIWarning", "when": "runtest", "filename": "C:\\Users\\Fernanda\\Desktop\\tcc_fernanda\\sistema_estoque\\factory.py", "lineno": 25}]}